class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        '''
        cat: sliding window
        runtime: O(n)
        space: O(1)
        solution:
        - L ptr = buy, R ptr = sell
        - L must always be lowest and R must always be highest
        - R cannot be earlier than L
        - profit = R - L
        - if value of R <= L, then move L to R as the new lowest
        '''
        max_profit = 0
        l = 0
        r = 1

        while r < len(prices):
            # r value not larger than l, we move l to r
            if prices[r] <= prices[l]:
                l = r
            # positive profit
            else:
                new_profit = prices[r] - prices[l]
                # new max profit
                if new_profit > max_profit:
                    max_profit = new_profit
            # move next day
            r += 1
        return max_profit
