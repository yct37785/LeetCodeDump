class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        '''
        cat: sliding window
        runtime: O(26*n)
        space: O(1)
        solution:
        - sliding window
        - for each window:
          * as long as gap_count <= k it is valid
          * if not valid, L++
          * if valid, R++
          * ap_count = window len - most common alpha
        '''
        alpha_counts = {}

        def most_common_alpha_count():
           return max(alpha_counts.values())
        
        l = 0
        r = 0
        longest_series_len = 0

        while r < len(s):
            # move right
            alpha_counts[s[r]] = alpha_counts.get(s[r], 0) + 1
            # move left
            while (r - l + 1) - most_common_alpha_count() > k:
                alpha_counts[s[l]] -= 1
                l += 1
            # window is valid
            if longest_series_len < (r - l + 1):
                longest_series_len = r - l + 1
            r += 1
        
        return longest_series_len