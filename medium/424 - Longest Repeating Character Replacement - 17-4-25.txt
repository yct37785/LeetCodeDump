class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        '''
        cat: sliding window
        runtime: O(26*n)
        space: O(1)
        solution:
        - for each window:
          * as long as gap_count <= k it is valid
          * if not valid, L++
          * if valid, R++
          * gap_count = window_len - max_f
        
        optimization:
        runtime: O(n)
        space: O(1)
        - L++ is now if instead of while
        - get max_f everytime we move R
        - L only need shift by 1 as (window_len-1) - max_f = k
        - hence no need for L to continuously shift and alpha_counts for max over and over again 
        '''
        alpha_counts = {}

        l = 0
        r = 0
        longest_series_len = 0
        max_f = 0

        while r < len(s):
            # move right by 1
            alpha_counts[s[r]] = alpha_counts.get(s[r], 0) + 1
            # always retrieve the max alpha
            max_f = max(max_f, alpha_counts[s[r]])
            # move left by 1 if exceed k
            # no scenario left needs to move more than 1
            # as left-1 will always be = k
            if (r - l + 1) - max_f > k:
                alpha_counts[s[l]] -= 1
                l += 1
            # window is valid
            if longest_series_len < (r - l + 1):
                longest_series_len = r - l + 1
            r += 1
        
        return longest_series_len