class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        '''
        cat: greedy
        runtime: O(n)
        space: O(1)
        solution:
        - for each chr that appears, we count occurs until occurs = total
        - partition = all chrs that appear and their occurs = totals respectively
        - aka greedy as we chose to end the partition asap
        '''
        partitions = []

        # track count of all chrs
        c_counts = {}
        for c in s:
            c_counts[c] = c_counts.get(c, 0) + 1
        
        # track occurrences of the chrs
        c_occurs = {}
        partition_count = 0
        none_zero_occur = 0
        # iterate s
        for i in range(len(s)):
            partition_count += 1
            c = s[i]
            # c occurs
            if c not in c_occurs:
                none_zero_occur += 1
                c_occurs[c] = c_counts[c]
            c_occurs[c] -= 1
            # check if 0
            if c_occurs[c] == 0:
                none_zero_occur -= 1
            # we found the partition
            if none_zero_occur == 0:
                partitions.append(partition_count)
                partition_count = 0
                c_occurs.clear()
        return partitions
        