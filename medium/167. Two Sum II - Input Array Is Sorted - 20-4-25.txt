class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        '''
        given:
        - 1d arr of nums
        constraints:
        - O(1) space
        - arr is ascending
        - exactly 1 solution
        output:
        - indices of 2 nums where sum = target
        solution:
        - 2 ptr
        - the indices could be in the middle, so scan from LHS is out
        - scan from both ends
        - R-- as long as sum < target
        - if sum > target, L++
        - guranteed no larger LHS pairs
        - runtime: O(n)
        - spacetime: O(1)
        '''
        l = 0
        r = len(numbers) # pair with last idx will never be < target
        while l < r:
            # assume pair > target
            r -= 1
            # check pair < target
            if numbers[l] + numbers[r] < target:
                # backtrack R and move L up
                r += 1
                l += 1
            elif numbers[l] + numbers[r] == target:
                return [l + 1, r + 1]

